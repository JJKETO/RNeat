pnl <- equity * equityAllocation * pctChange
equity <- equity + pnl
maxEquityAchieved <- max(maxEquityAchieved,equity)
print(paste("Equity:",equity,"Todays Pnl:",pnl,"MaxEquity:",maxEquityAchieved,"equityAllocation",equityAllocation,"PctChange",pctChange))
tradingDay <- tradingDay + 1
currentState[1] <- equity
currentState[3] <- maxEquityAchieved
currentState[4] <- tradingDay
currentState[5] <- simulationData[tradingDay,1]
currentState[6] <- simulationData[tradingDay,2]
currentState[7] <- simulationData[tradingDay,3]
currentState[8] <- simulationData[tradingDay,4]
currentState[9] <- simulationData[tradingDay,5]
currentState[10] <- simulationData[tradingDay,6]
return (currentState)
}
trading.UpdateFitness <- function(oldState,updatedState,oldFitness){
return (as.double(updatedState[3])) #max equity achieved
}
trading.CheckForTermination <- function(frameNum,oldState,updatedState,oldFitness,newFitness){
equity <- updatedState[[1]]
equityAllocation <- updatedState[[2]]
maxEquityAchieved <- updatedState[[3]]
tradingDay <- updatedState[[4]]
if(tradingDay >= nrow(simulationData)){
return(T)
}
if(abs(equityAllocation) > 2){ #Too much leverage
return(T)
}
if(equity/maxEquityAchieved < 0.8){
return(T)
} else {
return (F)
}
}
trading.PlotState <-function(updatedState){
equity <- currentState[[1]]
equityAllocation <- currentState[[2]]
maxEquityAchieved <- currentState[[3]]
plot(updatedState)
}
config <- newConfigNEAT(10,1,500,50)
tradingSimulation <- newNEATSimulation(config, trading.InitialState,
trading.UpdateState,
trading.ConvertStateToNeuralNetInputs,
trading.UpdateFitness,
trading.CheckForTermination,
trading.PlotState)
tradingSimulation <- NEATSimulation.RunSingleGeneration(tradingSimulation)
trading.UpdateState <- function(currentState,neuralNetOutputs){
#print(currentState)
equity <- currentState[[1]]
equityAllocation <- neuralNetOutputs[[1]]
maxEquityAchieved <- currentState[[3]]
tradingDay <- currentState[[4]]
#print(paste("ClNext",Cl(simulaitonMktData[tradingDay+1,])))
#print(paste("ClCurr",Cl(simulaitonMktData[tradingDay,])))
pctChange <- as.double(Cl(simulaitonMktData[tradingDay+1,]))/as.double(Cl(simulaitonMktData[tradingDay,]))-1
#print(paste("pctChange",pctChange))
#print(paste("equityAllocation",equityAllocation))
pnl <- equity * equityAllocation * pctChange
equity <- equity + pnl
maxEquityAchieved <- max(maxEquityAchieved,equity)
#print(paste("Equity:",equity,"Todays Pnl:",pnl,"MaxEquity:",maxEquityAchieved,"equityAllocation",equityAllocation,"PctChange",pctChange))
tradingDay <- tradingDay + 1
currentState[1] <- equity
currentState[3] <- maxEquityAchieved
currentState[4] <- tradingDay
currentState[5] <- simulationData[tradingDay,1]
currentState[6] <- simulationData[tradingDay,2]
currentState[7] <- simulationData[tradingDay,3]
currentState[8] <- simulationData[tradingDay,4]
currentState[9] <- simulationData[tradingDay,5]
currentState[10] <- simulationData[tradingDay,6]
return (currentState)
}
trading.UpdateFitness <- function(oldState,updatedState,oldFitness){
return (as.double(updatedState[1])) #equity achieved
}
trading.CheckForTermination <- function(frameNum,oldState,updatedState,oldFitness,newFitness){
equity <- updatedState[[1]]
equityAllocation <- updatedState[[2]]
maxEquityAchieved <- updatedState[[3]]
tradingDay <- updatedState[[4]]
if(tradingDay >= nrow(simulationData)){
return(T)
}
if(abs(equityAllocation) > 2){ #Too much leverage
return(T)
}
if(equity/maxEquityAchieved < 0.8){
return(T)
} else {
return (F)
}
}
trading.PlotState <-function(updatedState){
equity <- currentState[[1]]
equityAllocation <- currentState[[2]]
maxEquityAchieved <- currentState[[3]]
plot(updatedState)
}
config <- newConfigNEAT(10,1,500,50)
tradingSimulation <- newNEATSimulation(config, trading.InitialState,
trading.UpdateState,
trading.ConvertStateToNeuralNetInputs,
trading.UpdateFitness,
trading.CheckForTermination,
trading.PlotState)
tradingSimulation <- NEATSimulation.RunSingleGeneration(tradingSimulation)
for(i in seq(1,10)){ tradingSimulation <- NEATSimulation.RunSingleGeneration(tradingSimulation) }
plotPerformanceTracker(tradingSimulation$PerformanceTracker)
plotPerformanceTracker <- function(data){
plot(x=data[,"generation"],y=data[,"maxFitness"],col="blue",main="Fitness",xlab="Generation",ylab="Fitness",type="o",ylim=c(0,max(data[,"maxFitness"])),lwd=2)
lines(x=data[,"generation"],y=data[,"minFitness"],col="red",type="o",lwd=2)
lines(x=data[,"generation"],y=data[,"meanFitness"],col="green",type="o",lwd=2)
lines(x=data[,"generation"],y=data[,"medianFitness"],col="purple",type="o",lwd=2)
legend(x='bottomright', c("Min","Max","Mean","Median"),  fill=c("red","blue","green","purple"), bty='n')
}
plotPerformanceTracker(tradingSimulation$PerformanceTracker)
dev.new()
plotPerformanceTracker(tradingSimulation$PerformanceTracker)
for(i in seq(1,10)){ tradingSimulation <- NEATSimulation.RunSingleGeneration(tradingSimulation) }
plotPerformanceTracker(tradingSimulation$PerformanceTracker)
for(i in seq(1,10)){ tradingSimulation <- NEATSimulation.RunSingleGeneration(tradingSimulation); plotPerformanceTracker(tradingSimulation$PerformanceTracker)}
plotPerformanceTracker(tradingSimulation$PerformanceTracker)
tradingSimulation
save.image("C:/Users/Andrew/Documents/R/GekkoQuantTuts/NeatTrading/tradingSession.RData")
lm
install.packages('neuralnet')
library("neuralnet")
neuralnet
generate.initial.variables
varity.variables
varify.variables
tt <- as.formula(y~a+b+c)
tt
terms(formula)
terms(tt)
attr(terms(tt),"term.labels")
attr(terms(tt),"term.labels")
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
rneatneuralnet(y~a+b+c,NULL)
rneatneuralnet(y~a+b+c,NULL)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
rneatneuralnet(y~a+b+c,NULL)
rneatneuralnet(y~a+b+c,mktData)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
rneatneuralnet(y~a+b+c,mktData)
mktData
marketSymbol <- "^GSPC"
#Specify dates for downloading data, training models and running simulation
dataDownloadStartDate <- as.Date("2006-06-01")
trainingStartDate = as.Date("2007-01-01") #Specify the date to start training (yyyy-mm-dd)
trainingEndDate = as.Date("2009-12-31") #Specify the date to end training
outOfSampleStartDate = as.Date("2012-01-01")
outOfSampleEndDate = as.Date("2016-07-15")
nFastLookback <- 10 #The fast signal lookback used in linear regression curve
nSlowLookback <- 20 #The slow signal lookback used in linear regression curve
nRegressionCurvePercentileLookback <- 50
nFastBBLookback <- 10 #The fast Bolinger band width indicator
nSlowBBLookback <- 40 #The slow Bolinger band width indicator
nBBPercentileLookback <- 50
if(T){
symbolData <- new.env() #Make a new environment for quantmod to store data in
stockCleanNameFunc <- function(name){
return(sub("^","",name,fixed=TRUE))
}
getSymbols(marketSymbol, env = symbolData, src = "yahoo", from = dataDownloadStartDate)
cleanName <- stockCleanNameFunc(marketSymbol)
mktData <- get(cleanName,symbolData)
}
library("quantmod")
marketSymbol <- "^GSPC"
#Specify dates for downloading data, training models and running simulation
dataDownloadStartDate <- as.Date("2006-06-01")
trainingStartDate = as.Date("2007-01-01") #Specify the date to start training (yyyy-mm-dd)
trainingEndDate = as.Date("2009-12-31") #Specify the date to end training
outOfSampleStartDate = as.Date("2012-01-01")
outOfSampleEndDate = as.Date("2016-07-15")
nFastLookback <- 10 #The fast signal lookback used in linear regression curve
nSlowLookback <- 20 #The slow signal lookback used in linear regression curve
nRegressionCurvePercentileLookback <- 50
nFastBBLookback <- 10 #The fast Bolinger band width indicator
nSlowBBLookback <- 40 #The slow Bolinger band width indicator
nBBPercentileLookback <- 50
if(T){
symbolData <- new.env() #Make a new environment for quantmod to store data in
stockCleanNameFunc <- function(name){
return(sub("^","",name,fixed=TRUE))
}
getSymbols(marketSymbol, env = symbolData, src = "yahoo", from = dataDownloadStartDate)
cleanName <- stockCleanNameFunc(marketSymbol)
mktData <- get(cleanName,symbolData)
}
mktData
rneatneuralnet(y~a+b+c,mktData)
rneatneuralnet(q+y~a+b+c,mktData)
tt <- c("a","b","c")
qq <- c("b","c")
match(tt,qq)
match(qq,tt)
match(tt,qq)
find(tt,qq)
index(tt,qq)
match(tt,qq)
tt in qq
tt %in% qq
tt[tt %in% qq]
tt[!tt %in% qq]
g <- rneatneuralnet(q+y~a+b+c,mktData)
g
cbind(g$model.list$response,g$model.list$variables)
rbind(g$model.list$response,g$model.list$variables)
c(g$model.list$response,g$model.list$variables)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
c(g$model.list$response,g$model.list$variables)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
g <- rneatneuralnet(q+y~a+b+c,mktData)
gg
g
g$model.list$variables
paste(g$model.list$variables)
toString(g$model.list$variables)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
toString(g$model.list$variables)
g <- rneatneuralnet(q+y~a+b+c,mktData)
head(mktData)
g <- rneatneuralnet(GSPC.Open+y~a+b+c,mktData)
library("RNeat")
?newConfigNEAT
is.numeric("5")
is.numeric(5)
gg
g
g$model.list$response
length(g$model.list$response)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
g <- rneatneuralnet(GSPC.Open~GSPC.Close+GSPC.Low,mktData)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
g <- rneatneuralnet(GSPC.Open~GSPC.Close+GSPC.Low,mktData)
g
g$inputs
g$inputs$data
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
g <- rneatneuralnet(GSPC.Open~GSPC.Close+GSPC.Low,mktData)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
g <- rneatneuralnet(GSPC.Open~GSPC.Close+GSPC.Low,mktData)
g$inputs
g$inputs$trainingData
g$inputs$formula
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
trainingData
featuresTrainingData
apply(featuresTrainingData,2,function(x) { sum(x) })
apply(featuresTrainingData,1,function(x) { sum(x) })
t(apply(featuresTrainingData,1,function(x) { sum(x) }))
as.data.frame(apply(featuresTrainingData,1,function(x) { sum(x) }))
head(as.data.frame(apply(featuresTrainingData,1,function(x) { sum(x) })))
head(as.data.frame(apply(featuresTrainingData,1,function(x) { c(sum(x),max(x)) })))
head(t(as.data.frame(apply(featuresTrainingData,1,function(x) { c(sum(x),max(x)) })))
)
head((as.data.frame(apply(featuresTrainingData,1,function(x) { c(sum(x),max(x)) })))
)
head((as.data.frame(apply(featuresTrainingData,1,function(x) { t(c(sum(x),max(x))) }))))
t(as.data.frame(apply(featuresTrainingData,1,function(x) { c(sum(x),max(x)) }))
)
t(as.data.frame(apply(featuresTrainingData,1,function(x) { c(sum(x),max(x)) })))
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
trainingData
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
getwd()
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
trainingData <- as.data.frame(cbind(seq(1,10)^2,seq(1,10)))
colnames(trainingData) <- c("y","x")
net <- rneatneuralnet(y~x,trainingData,1)
net
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
t(as.data.frame(apply(featuresTrainingData,1,function(x) { c(sum(x),max(x)) })))
g
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
net
net$inputs$trainingData
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
net
net$inputs
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
net$neatConfig$Inputs
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
rnorm(10)
trainingData <- as.data.frame(cbind(seq(1,10)^2,seq(1,10),rnorm(10)))
trainingData
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
?seq
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/Rneat.R')
source('C:/dev/R/Packages/RNeat/R/Rneat.R')
source('C:/dev/R/Packages/RNeat/R/neat.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
plotPerformanceTracker()
net
net$PerformanceTracker
net$simulation$PerformanceTracker
plotPerformanceTracker(net$simulation$PerformanceTracker)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neat.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
plotPerformanceTracker(net$simulation$PerformanceTracker)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
rneatsim
plot(rneatsim)
plot.rneatsim <- function(data){
print("In here")
plotPerformanceTracker(data$simulation$PerformanceTracker)
}
rneatneuralnet <- function(data){
print("In here")
plotPerformanceTracker(data$simulation$PerformanceTracker)
}
rneatneuralnet <- function(data){
print("In here")
plotPerformanceTracker(data$simulation$PerformanceTracker)
}
plot(rneatsim)
class(rneatsim)
plot.rneatneuralnet <- function(data){
print("In here")
plotPerformanceTracker(data$simulation$PerformanceTracker)
}
class(rneatsim)
plot(rneatsim)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
compute(rneatsim)
compute(rneatsim,trainingData)
compute(rneatsim,trainingData[,2])
compute(rneatsim,trainingData[,1])
trainingData[,1]
trainingData[,"x"]
trainingData
trainingData[,"x"]
as.data.frame(trainingData[,"x"])
rneatsim$model.list
rneatsim
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
trainingData[,"x"]
compute(rneatsim,trainingData)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
compute(rneatsim,trainingData)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
compute(rneatsim,trainingData)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
compute(rneatsim,trainingData)
trainingData
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
error <- liveDataExpectedOutput[,"yExpected"] - results[,"yPred"]
print(cbind(results,liveDataExpectedOutput,error))
liveData
rownames(liveData)
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
#Continue training the network for another 5 generations
rneatsim <- rneatneuralnetcontinuetraining(rneatsim,20)
plot(rneatsim)
rm(list=ls())
source('C:/dev/R/Packages/RNeat/R/neatFormula.R')
plot()
results <- cbind(results,liveDataExpectedOutput,error)
plot(results)
results <- cbind(results,liveDataExpectedOutput,error)
plot(x=results[,"x"],y=results[,"yExpected"])
lines(x=results[,"x"],y=results[,"yPred"],col="red")
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
sqrt(0.4)
legend(x='topright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
dev.new()
layout(1:2)
plot(rneatsim)
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='topright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
dev.new()
layout(1:2)
plot(rneatsim)
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
class(rneatsim$simulation)
findMostFitGenome <- function(simulation){
maxFitness <- -Inf
maxFitnessGenome <- NA
for(i in seq(1,length(simulation$Pool$species))){
if(length(simulation$Pool$species[[i]]$genomes) > 0){
for(j in seq(1,length(simulation$Pool$species[[i]]$genomes))){
fitness <- simulation$Pool$species[[i]]$genomes[[j]]$Fitness
if(fitness > maxFitness){
maxFitness <- fitness
maxFitnessGenome <-simulation$Pool$species[[i]]$genomes[[j]]
}
}
}
}
return(maxFitnessGenome)
}
plot.NEATFormulaSimulation <- function(data){
genome <- findMostFitGenome(data)
drawPhenotypeNEAT(genome,data$Config)
}
plot(rneatsim$simulation)
source('C:/dev/R/Packages/RNeat/R/neatCharting.R')
plot(rneatsim$simulation)
library("igraph")
plot(rneatsim$simulation)
(matrix(c(1,2), 2, 1, byrow = TRUE)
)
matrix(c(1,2), 2, 1, byrow = TRUE)
matrix(c(1,1,2,3), 2, 1, byrow = TRUE)
matrix(c(1,2,3), 2, 1, byrow = TRUE)
matrix(c(1,2,3), 2, 2, byrow = TRUE)
matrix(c(1,1,2,3), 2, 2, byrow = TRUE)
dev.new()
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),heights=c(1,1))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
dev.new()
layout(matrix(c(1,3,2,3), 2, 2, byrow = TRUE),heights=c(1,1))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
plot.NEATFormulaSimulation <- function(data){
genome <- findMostFitGenome(data)
drawGenotypeNEAT(genome,data$Config)
drawPhenotypeNEAT(genome,data$Config)
}
dev.new()
layout(matrix(c(1,3,2,3), 2, 2, byrow = TRUE),heights=c(1,1))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
dev.new()
layout(matrix(c(1,3,2,4), 2, 2, byrow = TRUE),heights=c(1,1))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
dev.new()
layout(matrix(c(3,3,1,4,4,2), 3, 2, byrow = TRUE),heights=c(1,1))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
dev.new()
layout(matrix(c(3,3,1,4,4,2), 2, 3, byrow = TRUE),heights=c(1,1))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
dev.new()
layout(matrix(c(3,3,3,1,4,2), 2, 3, byrow = TRUE),heights=c(1,1))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
dev.new()
layout(matrix(c(3,3,3,1,4,2), 2, 3, byrow = TRUE),heights=c(1,2))
plot(x=results[,"x"],y=results[,"yExpected"],type="l", main="Neural Network y=sqrt(x) expected vs predicted",xlab="x",ylab="y")
lines(x=results[,"x"],y=results[,"yPred"],col="red",type="l")
legend(x='bottomright', c('yExpected','yPredicted'), col=c("black","red"), fill=1:2, bty='n')
plot(rneatsim)
plot(rneatsim$simulation)
